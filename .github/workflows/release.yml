# a release is going to be done any time we create a release tag for our
# project
# https://gitlab.com/LondonAppDev/recipe-app-api-devops-course-material/snippets/1965273
# https://github.com/eriktisme/recipe-app-api-proxy/blob/master/.github/workflows/release.yml
name: Release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # build image at current directory (root), and tag it with 'proxy'.
      # save image on disk on the job
      #
      # why? to present this image as an artifact:
      #  - a way to pass data from one job to another job to the next job
      - name: Build Docker image
        run: |
          docker build -t proxy .
          docker save --output image.tar proxy

      # make this data file available for the next jobs
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: image
          path: image.tar

  pushRelease:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: image

      - name: Retrieve Commit Tag
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      # trick: to pass values across processes, use export env
      - name: Tag and Push Docker Image (release)
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
          TAGGED_ECR_REPO: ${{ secrets.ECR_REPO }}:${{ steps.vars.outputs.tag }}
          LATEST_ECR_REPO: ${{ secrets.ECR_REPO }}:latest

        run: |
          docker load --input image/image.tar
          docker tag proxy:latest $TAGGED_ECR_REPO
          docker push $TAGGED_ECR_REPO
          docker tag $TAGGED_ECR_REPO $LATEST_ECR_REPO
          docker push $LATEST_ECR_REPO
